{"version":3,"sources":["store/actions.ts","store/selectors.ts","helpers/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostListUi.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentFormUI.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetailsUi.tsx","components/PostDetails/PostDetails.tsx","components/UserSelect/UserSelect.tsx","App.tsx","store/index.ts","index.tsx"],"names":["USER_ID","POST_ID","LOAD_POSTS","LOAD_COMMENTS","LOAD_POST_DETAIL","loadPostIdAction","payload","type","loadCommentsdAction","getUserIdSelector","state","userId","getPostIdSelector","selectedPostId","getPostsSelector","posts","getPostDetailSelector","postDetails","getPostCommentSelector","comments","URL","getPosts","uesrId","a","url","fetch","json","getPostDetails","postId","getPostComments","deleteComment","commentId","method","addComment","comment","body","JSON","stringify","headers","Loader","className","PostsListUi","initialize","setSelectePostId","map","post","title","onClick","id","PostsList","dispatch","useDispatch","useSelector","selectedUserId","useState","setInitialize","loadData","postsFromServer","useEffect","NewCommentFormUi","name","email","handleOnChange","handleOnSubmit","value","placeholder","onChange","NewCommentForm","handleAdd","setComment","event","target","PostDetailsUi","handleDelete","handleVisabiliti","isHidden","length","classNames","hide","PostDetails","setHidden","Promise","all","postFromServer","commentsFromServer","UserSelect","App","initialState","store","createStore","action","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6dfbe97.chunk.js","sourcesContent":["export const USER_ID = 'USER_ID';\nexport const POST_ID = 'POST_ID';\nexport const LOAD_USERS = 'LOAD_USERS';\nexport const LOAD_POSTS = 'LOAD_POSTS';\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS';\nexport const LOAD_POST_DETAIL = 'LOAD_POST_DETAIL';\n\nexport const loadUserIdAction = (payload: number) => ({\n  type: USER_ID,\n  payload,\n});\n\nexport const loadPostIdAction = (payload: number) => ({\n  type: POST_ID,\n  payload,\n});\n\nexport const loadUsersAction = (payload: User[]) => ({\n  type: LOAD_USERS,\n  payload,\n});\n\nexport const loadPostDetailAction = (payload: Post) => ({\n  type: LOAD_POST_DETAIL,\n  payload,\n});\n\nexport const loadPostsAction = (payload: Post[]) => ({\n  type: LOAD_POSTS,\n  payload,\n});\n\nexport const loadCommentsdAction = (payload: PostComment[]) => ({\n  type: LOAD_COMMENTS,\n  payload,\n});\n","export const getUserIdSelector = (state: RootState) => state.userId;\nexport const getPostIdSelector = (state: RootState) => state.selectedPostId;\nexport const getPostsSelector = (state: RootState) => state.posts;\nexport const getPostDetailSelector = (state: RootState) => state.postDetails;\nexport const getPostCommentSelector = (state: RootState) => state.comments;\n","const URL = 'https://mate.academy/students-api/';\n\nexport async function getPosts(uesrId: number): Promise<Post[]> {\n  let url = `${URL}posts`;\n\n  if (uesrId !== 0) {\n    url += `?userId=${uesrId}`;\n  }\n\n  const posts = await fetch(url);\n\n  return posts.json();\n}\n\nexport async function getPostDetails(postId: number): Promise<Post> {\n  const postDetails = await fetch(`${URL}posts/${postId}`);\n\n  return postDetails.json();\n}\n\nexport async function getPostComments(postId: number): Promise<PostComment[]> {\n  const comments = await fetch(`${URL}comments?postId=${postId}`);\n\n  return comments.json();\n}\n\nexport async function deleteComment(commentId: number) {\n  const url = `${URL}comments/${commentId}`;\n\n  return fetch(url, { method: 'DELETE' });\n}\n\nexport async function addComment(comment: NewComment) {\n  return fetch(`${URL}comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Loader } from '../Loader';\n\ntype Props = {\n  posts: Post[]\n  initialize:boolean\n  selectedPostId: number,\n  setSelectePostId: (postId: number) => void\n};\n\nexport const PostsListUi: React.FC<Props> = ({\n  posts,\n  initialize,\n  selectedPostId,\n  setSelectePostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <div>\n      {\n        !initialize\n          ? <Loader />\n          : (\n            <ul className=\"PostsList__list\">\n              {posts.map(post => (\n                <li className=\"PostsList__item\" key={post.id}>\n                  <div>\n                    <b>\n                      {`User #${post.userId}: `}\n                    </b>\n                    {post.title}\n                  </div>\n\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => setSelectePostId(post.id)}\n                  >\n                    {selectedPostId === post.id ? 'Close' : 'Open'}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )\n      }\n    </div>\n  </div>\n);\n","import './PostsList.scss';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadPostIdAction, loadPostsAction } from '../../store/actions';\nimport { getPostIdSelector, getUserIdSelector, getPostsSelector } from '../../store/selectors';\nimport { getPosts } from '../../helpers/posts';\nimport { PostsListUi } from './PostListUi';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPostsSelector);\n  const selectedUserId = useSelector(getUserIdSelector);\n  const selectedPostId = useSelector(getPostIdSelector);\n  const [initialize, setInitialize] = useState(false);\n\n  const setSelectePostId = (postId : number) => {\n    if (selectedPostId === postId) {\n      dispatch(loadPostIdAction(0));\n    } else {\n      dispatch(loadPostIdAction(postId));\n    }\n  };\n\n  const loadData = async () => {\n    const postsFromServer = await getPosts(selectedUserId);\n\n    dispatch(loadPostsAction(postsFromServer));\n    setInitialize(true);\n  };\n\n  useEffect(() => {\n    setInitialize(false);\n    loadData();\n  }, [selectedUserId]);\n\n  return (\n    <>\n      <PostsListUi\n        posts={posts}\n        initialize={initialize}\n        selectedPostId={selectedPostId}\n        setSelectePostId={setSelectePostId}\n      />\n    </>\n  );\n};\n","type Props = {\n  name: string,\n  body: string,\n  email: string,\n  handleOnChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n  handleOnSubmit: () => void\n};\n\nexport const NewCommentFormUi: React.FC<Props> = ({\n  body,\n  name,\n  email,\n  handleOnChange,\n  handleOnSubmit,\n}) => (\n  <form className=\"NewCommentForm\">\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        placeholder=\"Your name\"\n        className=\"NewCommentForm__input\"\n        onChange={handleOnChange}\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <input\n        type=\"text\"\n        name=\"email\"\n        value={email}\n        placeholder=\"Your email\"\n        className=\"NewCommentForm__input\"\n        onChange={handleOnChange}\n      />\n    </div>\n\n    <div className=\"form-field\">\n      <textarea\n        name=\"body\"\n        value={body}\n        placeholder=\"Type comment here\"\n        className=\"NewCommentForm__input\"\n        onChange={handleOnChange}\n      />\n    </div>\n\n    <button\n      type=\"button\"\n      className=\"NewCommentForm__submit-button button\"\n      onClick={handleOnSubmit}\n    >\n      Add a comment\n    </button>\n  </form>\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { NewCommentFormUi } from './NewCommentFormUI';\n\ntype Props = {\n  handleAdd: (comment: NewComment) => void\n  selectedPostId: number\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ handleAdd, selectedPostId }) => {\n  const [comment, setComment] = useState<NewComment>({\n    name: '',\n    email: '',\n    body: '',\n    postId: 0,\n  });\n\n  const clearState = () => {\n    setComment({\n      name: '',\n      email: '',\n      body: '',\n      postId: 0,\n    });\n  };\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    setComment({\n      ...comment,\n      [name]: value,\n    });\n  };\n\n  const handleOnSubmit = () => {\n    const post:NewComment = { ...comment, postId: selectedPostId };\n\n    clearState();\n    handleAdd(post);\n  };\n\n  return (\n    <NewCommentFormUi\n      handleOnChange={handleOnChange}\n      handleOnSubmit={handleOnSubmit}\n      name={comment.name}\n      email={comment.email}\n      body={comment.body}\n    />\n  );\n};\n","import classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\ntype Props = {\n  postDetails: Post,\n  isHidden: boolean,\n  comments: PostComment[],\n  initialize: boolean,\n  selectedPostId: number,\n  handleAdd: (comment: NewComment) => void,\n  handleDelete: (commentId: number) => void,\n  handleVisabiliti: () => void,\n};\n\nexport const PostDetailsUi: React.FC<Props> = ({\n  handleAdd,\n  handleDelete,\n  handleVisabiliti,\n  selectedPostId,\n  postDetails,\n  initialize,\n  isHidden,\n  comments,\n}) => (\n  <div className=\"PostDetails\">\n    {selectedPostId !== 0\n      ? (\n        <>\n          <h2>Post details:</h2>\n          {initialize\n            ? <Loader />\n            : (\n              <>\n                <section className=\"PostDetails__post\">\n                  <p>{postDetails.title}</p>\n                  <br />\n                  <p>{postDetails.body}</p>\n                </section>\n                <section className=\"PostDetails__comments\">\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={handleVisabiliti}\n                  >\n                    {isHidden\n                      ? `Show ${comments.length} comments`\n                      : `Hide ${comments.length} comments`}\n                  </button>\n\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        key={comment.id}\n                        className={classNames(\n                          'PostDetails__list-item',\n                          {\n                            hide: isHidden,\n                          },\n                        )}\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => handleDelete(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                </section>\n              </>\n            )}\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm handleAdd={handleAdd} selectedPostId={selectedPostId} />\n            </div>\n          </section>\n        </>\n      )\n      : 'No post selected'}\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addComment, deleteComment, getPostComments, getPostDetails,\n} from '../../helpers/posts';\nimport { PostDetailsUi } from './PostDetailsUi';\nimport './PostDetails.scss';\nimport { getPostCommentSelector, getPostDetailSelector, getPostIdSelector } from '../../store/selectors';\nimport { loadCommentsdAction, loadPostDetailAction } from '../../store/actions';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const comments = useSelector(getPostCommentSelector);\n  const postDetails = useSelector(getPostDetailSelector);\n  const selectedPostId = useSelector(getPostIdSelector);\n  const [initialize, setInitialize] = useState(false);\n  const [isHidden, setHidden] = useState(false);\n\n  const loadData = async () => {\n    if (selectedPostId !== 0) {\n      setInitialize(true);\n      const [postFromServer, commentsFromServer] = await Promise.all([\n        getPostDetails(selectedPostId),\n        getPostComments(selectedPostId),\n      ]);\n\n      dispatch(loadPostDetailAction(postFromServer));\n      dispatch(loadCommentsdAction(commentsFromServer));\n      setInitialize(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [selectedPostId]);\n\n  const handleVisabiliti = () => {\n    setHidden(!isHidden);\n  };\n\n  const handleDelete = async (commentId: number) => {\n    await deleteComment(commentId);\n    loadData();\n  };\n\n  const handleAdd = async (comment: NewComment) => {\n    await addComment(comment);\n\n    loadData();\n  };\n\n  return (\n    postDetails && (\n      <PostDetailsUi\n        isHidden={isHidden}\n        comments={comments}\n        initialize={initialize}\n        postDetails={postDetails}\n        selectedPostId={selectedPostId}\n        handleAdd={handleAdd}\n        handleDelete={handleDelete}\n        handleVisabiliti={handleVisabiliti}\n      />\n    )\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUserIdAction } from '../../store/actions';\nimport { getUserIdSelector } from '../../store/selectors';\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\n\nexport const UserSelect: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(getUserIdSelector);\n\n  const setSelectedUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const userId = +event.target.value;\n\n    dispatch(loadUserIdAction(userId));\n  };\n\n  return (\n    <header className=\"App__header\">\n      <label>\n        Select a user\n\n        <select\n          className=\"App__user-selector\"\n          value={selectedUserId}\n          onChange={setSelectedUserId}\n        >\n          <option value=\"0\">All users</option>\n          <option value=\"1\">Leanne Graham</option>\n          <option value=\"2\">Ervin Howell</option>\n          <option value=\"3\">Clementine Bauch</option>\n          <option value=\"4\">Patricia Lebsack</option>\n          <option value=\"5\">Chelsey Dietrich</option>\n          <option value=\"6\">Mrs. Dennis Schulist</option>\n          <option value=\"7\">Kurtis Weissnat</option>\n          <option value=\"8\">Nicholas Runolfsdottir V</option>\n          <option value=\"9\">Glenna Reichert</option>\n          <option value=\"10\">Leanne Graham</option>\n        </select>\n      </label>\n    </header>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect/UserSelect';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <UserSelect />\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createStore, applyMiddleware, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport {\n  POST_ID,\n  USER_ID,\n  LOAD_POSTS,\n  LOAD_COMMENTS,\n  LOAD_POST_DETAIL,\n} from './actions';\n\nconst initialState: RootState = {\n  posts: [],\n  userId: 0,\n  comments: [],\n  postDetails: null,\n  selectedPostId: 0,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_POSTS:\n      return { ...state, posts: action.payload };\n\n    case USER_ID:\n      return { ...state, userId: action.payload };\n\n    case LOAD_COMMENTS:\n      return { ...state, comments: action.payload };\n\n    case LOAD_POST_DETAIL:\n      return { ...state, postDetails: action.payload };\n\n    case POST_ID:\n      return { ...state, selectedPostId: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}